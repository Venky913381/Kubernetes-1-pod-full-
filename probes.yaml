>
#--------------------POD LIVENESS ,READINESS PROBE and STARTUP PROBE-----------------------------

> refer, https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/

>kubernetes provide three types of probes that we can carried out on pods/containers in order to know
>if they are healthy ,ready to accept service requests or if they need a restart etc.. these are_

1> Liveness Probe
2> Readiness Probes
3> StartUp Probe


>-----------------------------------------------Liveness Probe----------------------------------------------------

>Many applications running for long periods of time eventually transition to broken states, 
>and cannot recover except by being Restarted. 
>Kubernetes provides liveness probes to detect and remedy such situations.

>The kubelet uses liveness probes to know when to RESTART a container.


apiVersion: v1
kind: Pod                                                 
metadata: 
  name: live1
spec: 
  containers:                
    - name: cont1          
      image: nginx
      restartPolicy: Always        >Always(default), OnFailure, Never
      args: 
       - /bin/bash
       - -c
       - touch /tmp/test    # here , args will create a file test , this file will be checked by
      #  - sleep 10         # liveness probe at after 5 sec of container is ready and at regular interval of 3 sec.
      #  - rm -f /tmp/test  # as long this file is available for the probe to check, pod is consider as healthy.
      #  - sleep 20         # if we delete the file, then probe will no longer have acces to file and at next check, 
                            # probe will mark pod as unhealthy.
      livenessProbe:
        exec:                  
          command:
            - cat 
            - tmp/test
        initialDelaySeconds: 5
        timeoutSeconds: 3
        successThreshold: 2
        failureThreshold: 3

>If the command succeeds, it returns 0, and the kubelet considers the container to be alive and healthy. 
>If the command returns a non-zero value, the kubelet kills the container and restarts it.    
>Once, liveness probes have failed, and the failed containers will be killed and recreated.    

> apart from "command" in liveness probe, we can also use "http" request and "TCP" socket for the probe.        
> read on, Startup probe..........

>If the liveness probe fails, the kubelet kills the container, and the container is subjected to its restart policy.
>If a container does not provide a liveness probe, the default state is Success. 


>The kubelet uses readiness probes to know when a container is ready to start accepting traffic.
>A Pod is considered ready when all of its containers are ready, i.e. when it passes the liveness probe.

>-----------------------------------------------Readiness Probe--------------------------------------------------


Sometimes, applications are temporarily unable to serve traffic. For example, an application might need to 
load large data or configuration files during startup, or depend on external services after startup. 
In such cases, you don't want to kill the application, but you don't want wait to send it requests later. 
Kubernetes provides readiness probes to detect and mitigate these situations. 
A pod with containers reporting that they are not ready does not receive traffic through Kubernetes Services.


>even through pod is created and live, it do not means that it is ready to serve the requests. App may take 
>time to be ready to serve the traffic. we do readiness probe to check the same.

>Note: Readiness probes runs on the container during its whole lifecycle.

>Caution: Liveness probes do not wait for readiness probes to succeed. 
>If you want to wait before executing a liveness probe you should use initialDelaySeconds or a startupProbe.

apiVersion: v1
kind: Pod                                                 
metadata: 
  name: live1
spec: 
  containers:                
    - name: cont1          
      image: nginx
      args: 
       - /bin/bash
       - -c
       - sleep 10
       - touch /tmp/test
                                  #liveness probe not necessary for readiness check.
      livenessProbe:
        exec:                  
          command:
            - cat 
            - tmp/test
        initialDelaySeconds: 10    # will check for liveness after 10 sec of pod creation, every 3 seconds.
        timeoutSeconds: 3

      readinessProbe:
        exec:
          command:
            - cat 
            - /tmp/test
        initialDelaySeconds: 20 # will check for readiness after 20 sec of pod creation every 5 seconds.
        timeoutSeconds: 5 
        successThreshold: 2
        failureThreshold: 3

>If the readiness probe fails, the endpoints controller removes the Pod's IP 
>address from the endpoints of all Services that match the Pod.

>The default state of readiness before the initial delay is Failure . 
>If a container does not provide a readiness probe, the default state is Success 
      

>-----------------------------------STARTUP-PROBE---------------------------------------------------------        


Protect slow starting containers with startup probes
Sometimes, you have to deal with legacy applications that might require an additional startup time on 
their first initialization. 

In such cases, it can be tricky to set up liveness probe parameters without compromising the 
fast response to deadlocks that motivated such a probe. 

The trick is to set up a startup probe with the some Command, HTTP or TCP check, 
with a failureThreshold * periodSeconds long enough to cover the worse case startup time.

apiVersion: v1
kind: Pod
metadata:
  name: goproxy               #example just for ref, not to evaluate, may be incorrect.
  labels:
    app: goproxy
spec:
  containers:
  - name: goproxy
    image: registry.k8s.io/goproxy:0.1
    ports:
    - name: liveness-port
      containerPort: 8080
      hostPort: 8080

    livenessProbe:
      httpGet:
        path: /healthz
        port: liveness-port
      failureThreshold: 1
      periodSeconds: 10

    startupProbe:
      httpGet:
        path: /healthz
        port: liveness-port
      failureThreshold: 30
      periodSeconds: 10


Thanks to the startup probe, the application will have a maximum of 5 minutes (30 * 10 = 300s) to finish its
startup. Once the startup probe has succeeded once, the liveness probe takes over to provide a
fast response to container deadlocks. If the startup probe never succeeds,
the container is killed after 300s and subject to the pod's restartPolicy



>successThreshold  :- 
Minimum consecutive successes for the probe to be considered successful after having failed. 
Defaults to 1. Must be 1 for liveness and startup Probes. Minimum value is 1.


>failureThreshold  :- 
When a probe fails, Kubernetes will try failureThreshold times before giving up. 
Giving up in case of liveness probe means restarting the container. 
In case of readiness probe the Pod will be marked Unready. 
Defaults to 3. Minimum value is 1.

>initialDelaySeconds :- 
Number of seconds after the container has started before startup, 
liveness or readiness probes are initiated. Defaults to 0 seconds. Minimum value is 0.

>periodSeconds       :- 
 How often (in seconds) to perform the probe. Default to 10 seconds. 
Minimum value is 1.

>timeoutSeconds      :-   
Number of seconds after which the probe times out. 
Defaults to 1 second. Minimum value is 1.


>----------------------------------------------------------------------------------------------------------
