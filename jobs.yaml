>

1.RUN TO COMPLETION JOB:

>A Job creates one or more Pods and will continue to retry execution of the Pods until a specified number 
>of them successfully terminate. As pods successfully complete, the Job tracks the successful completions. 
i.e. if we create a job, and for some reason job execution fails, or if we deletes the job, Job will
recreate unless it exist successfully with zero exit code

>When a specified number of successful completions is reached, the task (ie, Job) is complete.

>Deleting a Job will clean up the Pods it created. Suspending a Job will delete its active Pods until the 
>Job is resumed again.

>A simple case is to create one Job object in order to reliably run one Pod to completion. 
>The Job object will start a new Pod if the first Pod fails or is deleted.
>You can also use a Job to run multiple Pods in parallel.

>for job object in k8s, Only a RestartPolicy equal to Never or OnFailure is allowed.

apiVersion: batch/v1
kind: Job
metadata:
  name: testJob
spec:
  template:
    spec:
      containers:
      - name: testJob
        image: busybox
        command: ["sleep", "10"]

      restartPolicy: Never   # Only a RestartPolicy equal to Never or OnFailure is allowed

  completions: 2   
  parallelism: 2    
  backoffLimit: 4
  activeDeadlineSeconds: 10


>completions  : is the number of iteration of the job.
>parallelism  : is the number of obs that can run in parallel, if not specifies only one job run at a time.  
>backoffLimit : if the job fails, this is the max number of retry for the job.
>activeDeadlineSeconds : is the time, we gave for to execute,if not executed within this time,pod will be terminated


>RestartPolicy applies to the Pod, and not to the Job itself,
>there is no automatic Job restart once the Job status is "type: Failed". 
>That is, the Job termination mechanisms activated with .spec.activeDeadlineSeconds 
>and .spec.backoffLimit result in a permanent Job failure that requires manual intervention to resolve

>------------------------------------------------------------------------------------------------------------

2.CRON JOBS: 

>CronJobs are meant for performing regular scheduled actions such as backups, report generation, and so on. 
>Each of those tasks should be configured to recur indefinitely (for example: once a day / week / month); 
>you can define the point in time within that interval when the job should start.



apiVersion: batch/v1
kind: CronJob
metadata:
  name: hello
spec:
  schedule: "* * * * *"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: hello
            image: busybox:1.28
            command:
            - /bin/sh
            - -c
            - date; echo Hello from the Kubernetes cluster
          restartPolicy: OnFailure

  successfulJobHistoryLimit: 3
  failedJobHistoryLimit: 3
  concurrencyPolicy: Allow              # Allow/Forbid/Replace


>Cron Template :-
# ┌───────────── minute (0 - 59)
# │ ┌───────────── hour (0 - 23)
# │ │ ┌───────────── day of the month (1 - 31)
# │ │ │ ┌───────────── month (1 - 12)
# │ │ │ │ ┌───────────── day of the week (0 - 6) (Sunday to Saturday;
# │ │ │ │ │                                   7 is also Sunday on some systems)
# │ │ │ │ │                                   OR sun, mon, tue, wed, thu, fri, sat
# │ │ │ │ │          
> * * * * *


>successfulJobHistoryLimit : will the specified number of record for successful jobs
>failedJobHistoryLimit     : will the specified number of record for failed jobs
>concurrencyPolicy         : if allowed, it will allow another cronjob to execute ,
>                            while other cron job is still executing.
>


If "startingDeadlineSeconds" is set to a large value or left unset (the default) and if "concurrencyPolicy" 
is set to Allow, the jobs will always run at least once

Caution: If startingDeadlineSeconds is set to a value less than 10 seconds, the CronJob may not be scheduled. 
This is because the CronJob controller checks things every 10 seconds

>------------------------------------------------------------------------------------------------------------