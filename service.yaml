>

>Service in k8s

>we need a services for enabling the pod-to-pod communication, also to enable external traffic to access 
>microservice/app deployed in k8s pod/cluster..

>services can be defined through yaml manifest files or using imperative command. and can be deployed using 
>kubectl apply -f <service_file.yaml> command.

>Port :- port in service manifest file, represents the actual port that service listen on. if service listens 
>        on port 3000, we can access the service through its <service_name>:3000

>Target Port :- target port represents the actual Container Port. it should match the container port
>               in the pod's manifest file.

>Node Port   :- Node port represents the port of the Node , from which external traffic access the service. 
>               It is used with Ip address of the node/ec2 , and service will be accessible.
>               NodePort Ranges from port 30000 to port 32767.

>type : type represent the type of the service.

>flow :  <ip_address>:NodePort ------>  Port ------> TargetPort   {for nodePort service}

>kubectl get service -l label=value  ---> to get service details filtered by labels.

read more on services: https://kubernetes.io/docs/concepts/services-networking/service/

>--------------------------------------------------NodePort----------------------------------------------------
   
apiVersion: v1
kind: Service 
metadata:
  name: nginxservice
  labels: 
    name: service1
spec:
  type: NodePort
  ports:                                                            
  - nodePort: 32000  > on node , on nodes port, with web ip / browser / ip:port / this is endpoint
    port: 9000       > on pod , machine port will mapped to this port on pod
    targetPort: 80   > on container, container port
  selector:
    appname: myapp 



apiVersion: v1
kind: Pod
metadata:
  name: servicepod
  labels: 
    appname: myapp
spec: 
  containers:
    - image: coolgourav147/nginx-custom
      imagePullPolicy: Never
      name: servicecontainer 
      ports:
        containerPort: 80




>--------------------------------------------------ClusterIP---------------------------------------------------

apiVersion: v1
kind: Service 

metadata:
  name: servone
  labels: 
    name: service1

spec:                                  #can be used with above pod too..
  type: ClusterIP
  selector:
    appname: myapp
  ports:
  - name: my-service
    port: 9000              > service port/listening port
    protocol: TCP
                                                  

apiVersion: v1
kind: Pod
metadata:
  name: nginxcustom
  labels: 
    appname: myapp
spec: 
  containers:
    - image: coolgourav147/nginx-custom
      imagePullPolicy: Never
      name: servicecontainer  
      ports:
        - containerPort: 80        > target port
          name: my-service         > service will be available on this port name

>-------------------------------------------------

>kubectl expose <type> <name> --type=<NodePort/ClusterIP> --port=<port> --target-port=<port> --name <svcName>
>kubectl expose pod <podname> --type=<NodePort/ClusterIP> --port=<port> --target-port=<port> --name <svcName>

>kubectl apply -f <filename.yaml>  / --dry-run=client
>kubectl get service/svc    -o wide / --show-labels

>kubectl port-forward --address 0.0.0.0 svc/<serviceName> <PortOnHost>:<PortOnPod>
>kubectl port-forward --address 0.0.0.0 svc/<ServiceName> --namespace <NameSpace Name> Machine/HostPort:PodPort

>kubectl port-forward -n <name_space> pod/<pod_name> <port>  ---> to forward the traffic to pod w/o service

>curl <servicename>.<ns_name>.svc.cluster.local              ---> to access service in another namespace, fqdn

>kubectl get endpoints/ep -n <namespace>                     ---> to get the endpoints of pods in namespace


>----------------------------------------------------

apiVersion: v1
kind: Service 
metadata:
  name: nginxservice
  labels: 
    name: service1
spec:
  type: NodePort

  ports:                                                http://ip:32000---->9000---->80
  - nodePort: 32000 
    port: 9000      
    targetPort: 80  
    name: my-service
    protocol: tcp

  selector:
    appname: myapp 


>-------------------------------------------------------------

>1) http://ip:32000 ---->9000---->80
>2) http://ip:32000 ---->9000---->my-service

  ports:                                               
  - nodePort: 32000
    port: 9000      
    targetPort: 80  

    name: my-service
    protocol: tcp   

> for using "name" container specs must mentioned the Port attributes with containerport and its name in container
> spec as below.....
ports:
- containerPort: 80        
  name: my-service      


>---------------------------------------------------------------------------------------------------------------

> Read_More_

  1. NodePort      (expose service out of cluser)
  2. LoadBalancer  (expose service out of cluser)
  3. ClusterIP     (expose service only within cluser)

  4. External Name Service
  5. Headless Service
  6. External IP Service

  7. Port Forwarding

  8. Ingress/Ingress_Resources/Ingress_Rule
  9. Ingress Controller 
  
  
>---------------------------------------------------------------------------------------------------------------


>There are two types of applications, 1.Stateless application  and  2.Statefull application.

Stateless : it will do Not store anything (data), previous session, nor it retrieve anything, eg . Nginx,apache

Statefull : this type of application stores state, so whenever application crashes or if any issue arises
            or app lost connection, whenever, it comes back it starts from the same state as data is stored. 
            this type of application can not always start from scratch.


> Headless Service_

The default behaviour of the k8s is to assign internal ip address to the service.
Through this ip address, the service will proxy all the client requests 
and load balance them to the pods behind it. i.e single service ip address exposes/represent multiple pods.

>If we, DNS query the service name via utilities like nslookup, k8s returns the service's ip but 
>not the ip's of the pod it manages.

if we are running the single instance of the database pod like mangodb , 
we do not need to load balance as only one replica is available. 

if, we do the dns query of service name to return the ip address of mangodb pod but not of service.
to achieve this , we explicitly set the '.spec.clusterIP' of the service to 'None' to instruct k8s not to
assign any IP to the service  or nor to Load balance the requests. 
This type of service is knows as Headless Service.

if a headless service manages more than one pod, service dns name will return a lists of pods managed
by the service. The requests will accept the first IP address returned (after load balancing them).

One of the misconception with Headless service is that, it do not Load Balances the request.
Even though headless service return the ip addresses of the pods, it will still load balances the 
requests to the pods and this type of load balancing is called as "DNS ROUND ROBIN LOAD BALANCING".

>Whatever the name of our headless service is , it represents all the backend pods it manages. the name 
>of service will not resolve to the ip address of the service itself. infact headless service is acting
>like single DNS name for all the backend pods it manages. 

>As simple DNS call to headless service will result in a multiple DNS results , that is it return IP's 
>of all the backend pods it manages.That is why it is called as "DNS ROUND ROBIN LOAD BALANCING".

>one of other misconception with headless service is that, it always forward the requests to first pod, 
>NO, Headless service will Not always forward the request to first pod. this is becouse, headless sevrvice will
>load balance the requests across the pods through the service proxy. The request will get accepted by
>first pod, after load balancing, just like cluster ip service.

curl <headless-service-name>:<Container_Port> , here headless service will NOT resolve to first instance of the 
pod, and as it is load balances the requests, it will result in different ip's of pods every time requests is made.


>curl <headless_service_name>:<container_port>  ---> this request is directaly forwarded to backend pod through
>    DNS ROUND ROBIN LOAD BALANCING mechanism and for each dns query/request it will result in new ip address
>    as headless service is load balancing the requests. 

>However, headless service , when used with StatefulSets provides a unique identity to each pod
>managed by StatefulSet and make it possible to forward the request always to single pod as it provide
>stable name and exposes the pod ip instead of service's ip.


>Headless services are more useful when_

1. Pod to pod communication.
>   pod to pod communication , where we do not wants request to be load balance by service and insted of 
>   returning the service ip, we wants to dynamically fetch the ips of pods managed by service. so that request
>   can be forwared to only target pod and not any other pod.

2. Master-slave configuration, where slaves needs to be aware of the master pod like Clustered databases.
>  application where we have multiple instances of the databases, where one instance of database acts as a
>  primary instance and other instances act as secondary or read replicas and replicated the data from primary
>  instance. insuch cases, primary db instances needs to have stable name and ip address.   


>a headless service is a service without service IP , instead of forwarding request to pod and 
>returning the response from pod , it load balances the requests and returns the ips of the pod it manages.

>This allows us to interact directaly with pods instead of proxy. it is as simple as specifying
>'None' for '.spec.clusterIP' and can be utilized with or without selectors.

>Headless service allows us to reach pod directaly, rather than the service acting as a load balancer or
>proxy. this can have many use cases.


apiVersion : v1
kind: Service 
metadata:
  name: headless-service

spec:

  clusterIP: None  <------- explicitly, declare the ClusterIP as None

  ports: 
    - name: http 
      port: 80
      targetPort: 5000
      protocol: TCP
  selector: 
      app: frontend    

>headless services are needed for stateful set application.

>---------------------------------------------------------------------------------------------------------------

>Ingress Controller 
>Ingress Resources         #check ingress yaml file.


>--------------------------------------------------------------------------------------------------------------

# Named Port_

apiVersion: v1
kind: Pod
metadata:
  name: myapp
  labels:
    name: myapp
spec:
  containers:
  - name: myapp
    image: nginx

    ports:
      - containerPort: 80
        name: openPort


apiVersion: v1
kind: Service
metadata:
  name: myapp
spec:
  selector:
    app: myapp

  ports:
  - protocol: tcp
    port: 7575
    targetPort: openPort
        
>here, we have named the port on container along with opening the perticular port and 
>using service, we are targeting the port on pod, not by using its port number , but by using the
>port name , that we have given to the port , we opened on pod.

>this way, even if we changed the port numbers on pod, we need not to update the same on service manifest,
>as service is identifying the target port using its name  and not using its number.


>--------------------------------------------------------------------------------------------------------------


# Service Without Selectors_

>we can define the service without selectors, however , in this case, we need to define the seperate
>endpoints resource of the pod using endpoints manifest file.

Services most commonly abstract access to Kubernetes Pods thanks to the selector, 
but when used with a corresponding Endpoints object and without a selector, 
the Service can abstract other kinds of backends (backend like pods, rc, rs), including ones 
that run outside the cluster. For example :-

1> You want to have an external database cluster in production, 
   but in your test environment you use your own databases.

2> You want to point your Service to a Service in a different Namespace or on another cluster.

3> You are migrating a workload to Kubernetes. While evaluating the approach, 
   you run only a portion of your backends in Kubernetes.



apiVersion: apps/v1
kind: Deployment
metadata:
 name: nginx-dpl                 # Name of the deployment object
 labels:
   app: nginx                     
spec:
 replicas: 3                    # Number of instances in the deployment
 selector:                      # Selector identifies pods to be
     matchLabels:               #     part of the deployment 
        app: nginx              #     by matching of the label "app" 
 template:                      # Templates describes pods of the deployment
   metadata:
     labels:                    # Defines key-value map
       app: nginx               # Label to be recognized by other objects
   spec:                        #     as deployment or service
     containers:                # Lists all containers in the pod
     - name: nginx-pod          # container name
       image: nginx:1.17.4      # container docker image
       ports:
       - containerPort: 80      # port exposed by container


we need to manually get the ips of the pods before, proceeding with enpoints manifest.
>kubectl get pods -o wide | awk {'print $1" " $3" " $6'} | column -t
NAME                       STATUS   IP
ngix-dpl-7d6b8c8944-8zsgk  Running  100.96.8.53
ngix-dpl-7d6b8c8944-l4gwk  Running  100.96.6.43
ngix-dpl-7d6b8c8944-pffsg  Running  100.96.8.54      

>Service without selectors_

apiVersion: v1
kind: Service
metadata:
  name: dummy-svc
  labels:
    app: nginx
spec:
 ports:
    - protocol: TCP
      port: 80
      targetPort: 80
      name: http

>manually defining the endpoints_ 

apiVersion: v1
kind: Endpoints
metadata:
  name: dummy-svc 
subsets: 
  - addresses:
    - ip: 100.96.8.53
    - ip: 100.96.6.43
    - ip: 100.96.8.54
    ports:
    - port: 80
      name: http

(we can remove 'name' attribute from both service and endpoints, removal from any one will result in error)

>this method of exposing pods are not efficient at all, as we need to get the ips of the pod manually and
>needs to define it in endpoints. and if pod controller recreates the pod then ip of the pod will get changed,
>and we need to rewrite the endpoints manifest.

>--------------------------------------------------------------------------------------------------------------

#accessing service with containers environmental variable.

>when we create a service within the namespace before creation of pod, at the time pod creation k8s
>injects the service enviromental variable in to the container.
>using these variable we can access the service within the namespace.

>first exec in to the container from which we want to communicate with other pod.
>list the environmental variable using, #env
>we will get environmental variable likes, <service_name>_SERVICE_HOST, <service_name>_SERVICE_IP

>Using these variable we can access service as,
 curl <service_name>_SERVICE_HOST:<service_name>_SERVICE_HOST/<path_if_exist>

>this is similar the accessing the service using DNS or fqdn, where we access the service as below_
 curl <service_name>.<namespace_name>.svc.cluster.local


>--------------------------------------------------------------------------------------------------------------

