>

*SECRETS_IN_KUBERNETES_

>we use secrets to decouple the application specific properties and data from application image. and we pass
>this aplication specific properties and data as environmental variable during pods creation. 

>This is secure way to pass the data, as data we passing is in encoded form using "BASE64" encoding method.
>using secrets we can pass up to 1 MB of data to application/pod.

>secrets are of three types in k8s, these are_
Generic (Opaque)
Docker-Registry
TLS

>kubectl create secret --help
>kubectl get secrets <sec> -o yaml    --> to see corresponding encoded value.
>echo -n "value" | base64             --> to encode to base64 value.

>only those secrete which are sensitive needed to be base64 encoded, other non-sensitive secret's 
>can be passed as simple text. 
>we we describe the secrets using "kubectl describe secret <secret_name>", it will not show any of the values
>of both encoded and Non-Encoded secrets. it will only show their sizes in byte.


Creating Config_Map using Imperative Commands:

>kubectl create secret  <type> <my-sec1> --from-literal=<key/name>=<base64_encoded_value>  --> direct from literals
>kubectl create secret generic <my-sec1> --from-literal=<key/name>=<base64_encoded_value>  --> direct from literals

Generic :
>kubectl create secret generic my-generic-secret --from-literal=name=swapnil 
>                                                --from-literal=password='HGIUkhiuH@#$'
>                                                --from-literal=token='JHGtyjgvJHG#%@#'

>For All the information we pass via tls type secrete, we can get the size of the this file 
>by describing the secret. it will give us details like size of the secret, name, namespace, labels, annotations etc.


Docker_Registry:
>kubectl create secret docker-registry docker_secret --docker-email=example@mail.com
>                                                    --docker-username=developer
>                                                    --docker-password=Pass1234
>                                                    --docker-server=my-registry.example:6004

>All the information we pass via Docker-Registry type secrete, will be stored as a ".dockerconfigjson" file,
>we can get the size of the this file by describing the secret.
>this secret, after getting injectected in to container, will be available in json format in 
>".dockerconfigjson" file as environmental variable


TLS:
>kubectl create secret tls my-tls-secret --cert=path/to/certificate/file (.crt file)
>                                        --key=path/to/key/file          (.pem file)

>For All the information we pass via tls type secrete, we can get the size of the this file 
>by describing the secret.
>the certificate and Key, we pass this data, will not get stored as Environmental variable, 
>rather we pass the entire files as it is inside the container.


#-----------------------------------------   necessicities for  demo  --------------------------------------------

>a) Secrete from single file

single property file: application.properties
#databse_details
database_ip="<base64_encoded_value>"                             
database_password="<base64_encoded_value>"                        
database_username="<base64_encoded_value>"

>kubectl create secret generic <my-filesec> --from-file=application.properties  --> from file

*-------------------------------------------------------------------------------------------------

>b) secrete from multiple files in the directory

multiple properties file from folder (create any folder): /properties/
create/add needed number of properties file in it: 
test1.properties
test2.properties
test3.properties

>kubectl create secret <my-sec1> --from-file=properties/   ---> from folder (/)

*-------------------------------------------------------------------------------------------------

>c) secrete from environmental file

from env file: env.sh
var1=<base64_encoded_value>
var2=<base64_encoded_value>           #this is different from above i.e --from-file, 
var3=<base64_encoded_value>           #in the sense that it do not consider spaces or comments in it.

>kubectl create secret generic <my-envsec> --from-env-file=env.sh

*-------------------------------------------------------------------------------------------------

>d)create secrets using manifest file

apiVersion: v1
kind: Secret

metadata: 
  name: sec4
data:
  key1: dmFsdWUx
  key2: dmFsdWUy      
  key3: dmFsdWUz
                       #get encoded value, using >echo -n "value" | base64

>------------------------------------

apiVersion: v1
kind: Secret
metadata:
  name: secret2
  
data:
  application.properties: |
    database_ip=<base64_encoded_value>
    database_password=<base64_encoded_value>
    database_username=<base64_encoded_value>

  admin.properties: |
    username=<base64_encoded_value>
    password=<base64_encoded_value>
  

> kubectl create -f <sec>.yaml  


*--------------------------injecting_secret_into_pod-------------------------------------------


>a) Injecting selected variables as Env variable in to pod....

apiVersion: v1
kind: Pod 
metadata: 
  name: pod1
spec: 
  containers:
    - name: cont
      image: nginx
      env:
        - name: my-var
          valueFrom: 
            secretKeyRef:
              key: key1    #key in the secret
              name: sec4   #name of secrete

        - name: my-var2
          valueFrom: 
            secretKeyRef:
              key: key2
              name: sec4    


>2.Injecting all variable from secrets in to container

apiVersion: v1
kind: Pod 
metadata: 
  name: pod2
spec: 
  containers:
    - name: cont          
      image: nginx
      envFrom:                # injecting all varible from file
       - secretRef: 
          name: sec4             



>3.injecting all varibles as a file in to pod..

apiVersion: v1
kind: Pod 
metadata: 
  name: pod3
spec: 
  containers:
    - name: cont         
      image: nginx

      volumeMounts:
        - name: testvol
          mountPath: "/secrets"  
          readOnly: true

  volumes:                      # match the name
    - name: testvol               
      secret: 
        secretName: sec4         


>injecting selected varible as a file in to pod..

apiVersion: v1
kind: Pod 
metadata: 
  name: pod3
spec: 
  containers:
    - name: cont         
      image: nginx

      volumeMounts:
        - name: testvol
          mountPath: "/secrets"  
          readOnly: true

  volumes:                      # match the name
    - name: testvol               
      secret: 
        secretName: sec4 
        items:
          - key: key1
            path: "var-1"
          - key: key2
            path: "var-2"


>--------------------------------------------------------------------------------------------------------