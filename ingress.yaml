>

>-----------------------------------app--------------------------------------

apiVersion: v1
kind: Pod
metadata :
  name: app1 
  labels: 
    appname: app1 
spec: 
  containers:
    - image: nginx
      name: nginxapp2
      ports: 
      - containerPort: 8080



apiVersion: v1
kind: Service
metadata:
  name: app1service
spec:
  selector:
    appname: app1
    type: ClusterIP
    ports:
    - name: http
      port:  80
      targetPort:  8080 
      protocol: tcp     

>---------------------------------
apiVersion: v1
kind: Pod
metadata :
  name: app2
  labels: 
    appname: app2
spec: 
  containers:
    - image: coolgourav147/nginx-custom
      name: nginxapp2 
      ports: 
      - containerPort: 8080                   


apiVersion: v1
kind: Service
metadata:
  name: app2service
spec:
  selector:
    appname: app2
    type: ClusterIP
    ports:
    - name: http
      port:  80
      targetPort:  8080 
      protocol: tcp 

>---------------------------------------

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-test_path_based
spec:
  rules:  
  - host: 8.8.8.8:6060
      paths:

      - path: /test1
        pathType: Prefix               # 8.8.8.8:6060/test1 --> app1service --> app1
        backend:
          service:
            name: app1service
            port:
              number: 80

      - path: /test2
        pathType: Prefix               # 8.8.8.8:6060/test2 --> app2service --> app2
        backend:                      
          service:
            name: app2service
            port:
              number: 80

>----------------------------------------------------***----------------------------------------------------------    

>ingress support path based routing, which have advantage over other exposing services like node port, cluster ip ,
>Load Balancer.

>Instead of exposing each service independently , we use ingress controller to expose the multiple services 
>using same ip address. 

>Ingress controller, typically do not eliminates the need for external load balancer, 
>but it add extra layer of routing and control behind the load balancer.

>we only pay for one Load balancer or ip provided by cloud provider and Ingress controller is smart enough to
>route various requests using simple Host or URL based routing.

>Ingress controller allows us to map multiple DNS names to single IP and using routing rules, we can route
>the traffic to the proper service based on its DNS names.

>DNS name only resolve to the IP, it can not resolve to the ip:port combination, But in k8s we need to resolve to
>port number too, as node port service open our microservice on specific port.


> Ingress/Ingress_Resources/Ingress_Rule :--> 
    is an API object that manages external access to the service in the cluster, Typically HTTP.
    it provides Load balancing, SSL termination, and name based virtual hosting. 

    It exposes HTTP and HTTPS routes from outside the cluster to service within the cluster.

    Traffic routing is controlled by rules defined by Ingress Rules.An ingress does not expose 
    arbitrary port or protocol. Exposing services are done using NodePort or LoadBalancer.

    > There are two types of Ingress Rules
      1. Path Based Routing
      2. Host Based Routing

> Ingress Controller :--> 
    is the one that is responsible for implementing all the ingress rules, usually with 
    load balancer to help handle traffic.

  >  Ingress controller route the traffic only through DNS names, not through IP address, as all the routing
  >  rules are defined in Ingress Controller. i.e.Application are only accessible by DNS names and not through IP. 

    eg_ nginx, haproxy, voyger, istio, traefik...
    
> Ingress Class :-->
    Ingresses can be implemented by different controller , such as Nginx, Traefik etc. often with 
    different configuration.

    Each ingess should specify a class, a reference to an 'IngressClass' resource that contains additional 
    configuration including the name of the controller that should implement the class.


>----------------------------------------------------------------------------------------------------------------- 

>Ingress exposes HTTP and  HTTPS routes from outside the cluster to service within the cluster.
>Traffic routing is controlled by rules defined in ingress resource.

>Ingress resource can not do anything on their own, we need to have an Ingress controller in order for ingress 
>resource to work. Thus, Ingress Controller implements the rules defined by Ingress Resource.



>Path based routing

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: path_based_ingress_example
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  ingressClassName: nginx
  rules:
  - host: 
    http:                         # will respond to any host
      paths:

      - path: /nginx
        pathType: Prefix
        backend:
          service:
            name: app1service
            port:
              number: 80

      - path: /flask
        pathType: Prefix
        backend:
          service:
            name: app2service
            port:
              number: 80  



>-----------------------------------------------------------------------------------------------------------------

>Host based routing

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: host_based_ingress_example
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  ingressClassName: nginx
  rules:

  - host: nginx-app.com        # will responds to only this hosts
    http:
      paths:
      - backend:
          service:
            name: test-1
            port:
              number: 80 

  - host: flask-app.com
    http:
      paths:
      - backend:
          service:
            name: test-2
            port:
              number: 80   

>-----------------------------------------------------------------------------------------------------------------

>When would you use this?

Ingress is probably the most powerful way to expose your services, but can also be the most complicated. 
There are many types of Ingress controllers, from the Google Cloud Load Balancer, 
Nginx, Contour, Istio, and more. There are also plugins for Ingress controllers, like the cert-manager, 
that can automatically provision SSL certificates for your services.

Ingress is the most useful if you want to expose multiple services under the same IP address, 
and these services all use the same L7 protocol (typically HTTP). You only pay for one load balancer 
if you are using the native GCP integration, and because Ingress is “smart” you can get a lot of 
features out of the box (like SSL, Auth, Routing, etc)


>------------------------------------------------------------------------------------------(below by vikram)....

>ref_ https://kubernetes.io/docs/concepts/services-networking/ingress/


# Issues with Cloud Load Balancer_

>Ingress controller needs ingress resources to function. Ingress resource is a native resource provided by k8s.
>similarly , we can use Nginx, HAProxy, Istio as a third party ingress resource.

>The big downside is that each service you expose with a LoadBalancer will get its own IP address, 
>and you have to pay for a LoadBalancer per exposed service, which can get expensive!

>with cloud lb, we need to pay for each of the service that is exposed using LB as the service. as service grows
>in number, complexity to manage SSL's, scallings, Auth..etc also increases.

>Ingress controller allows us to manage all the above functionalities within the k8s cluster itself with a 
>defination file, that lives along the rest of your application deployments file.

>ingress controller can perform load balancing , Auth, SSL and URL/Path based routing configuration by being 
>inside the cluster, living as a deployment or a DAEMON SET.

>Ingress helps user access the application using single externally accessible URL, that you can configure 
>to route to different services within the cluster based on url, at the same time terminates the SSL/TLS.

>-----------------------------------------------------------------------------------------------------------------

# Ingress Controller_

>Ingress is the most powerful way to expose the service outside the cluster.
>it exposes multiple services under the same ip address.

>ingress controller, typically does not elimates the need for an external load balancer- the ingress controller
>simply adds an additional layer of routing and control behind the load balancer.

>we only need to pay for one load balancer ip address, if we are using any cloud native load balancer, 
>ingress is smart enough to route various requestsusing simple Host or URL based routing.

>this way we can avoid exposing each service and having ip's assign for each service.

>ingress do not come with standard k8s binary, they need to be deploy seperatly.
>thay can generally implemeted by a third party proxy, that can read the ingress rules and adjust its 
>configuration accordingly.

>there are many ingress controller, like AWS ALB, Traefik, Nginx, Istio, Contour etc.

>there are also many plugins for ingress controller like cert-manager, that can automatically provision 
>SSL certificates for the services.

>ingress controller automtically provide features such as SSl, Auth straight out of box. 
(SSl termination, i.e. we have HTTPS traffic till ingress, once traffic goes inside ingress it will simply be http)

>if we are running cluster on-prem, Ingress controller are to be exposed via NODEPORT and use Proxy
>between DNS server and Ingress Controller, unless we have other solution like MetalLB

>-----------------------------------------------------------------------------------------------------------------

# Ingress Controller VS Ingress Resources_

Ingress/Ingress Resources/Ingress Rules: 
>An API object that manages external access to the services in a cluster, typically HTTP.
>Ingress may provide load balancing, SSL termination and name-based virtual hosting.

>Ingress exposes HTTP and HTTPS routes from outside the cluster to services within the cluster. 
>Traffic routing is controlled by rules defined on the Ingress resource.

>load balancing , Auth, SSL and URL/Path based routing configuration by being 
>inside the cluster, living as a deployment or a DAEMON SET

>An Ingress does not expose arbitrary ports or protocols. Exposing services other than HTTP and HTTPS to the 
>internet typically uses a service of type Service.Type=NodePort or Service.Type=LoadBalancer.


Ingress Controller:
>is one  responsible for the implemetation of the all ingress rules, usually with a load balalncer, to help
>handle the traffic.
>even ingress controller acts like a proxy inside k8s platform.

>-----------------------------------------------------------------------------------------------------------------

# Path Based Routing _

>in path based routing , NO host is specified, so the rule applies to all inbounbed HTTP traffic through
>ingress controller.

>every path is associated with backend service of clusterIP type and a port on which service listen on.

>pathtype is mandatory and supports 'EXACT' and 'PREFIX' types

>a default backend is often configured in an ingress controller to servive any request that do not match a 
>path in a spec , typically custom 404  pages. it is not defined in ingress rules.


>eg_

- host: 
    http:                     
      paths:
      - path: /nginx
        pathType: Prefix
        backend:
          service:
            name: test-1
            port:
              number: 80


# Host/Name/URL Based Routing _

>in Name/URL based routing , all inbound HTTP traffic through the ingress controller are routed according
>to the host URL

>Ingress controller matches the host url in the http header to match the requests with the ingress rules.

>eg_

  rules:
  - host: nginx-app.com     
    http:
      paths:
      - backend:
          service:
            name: test-1
            port:
              number: 80 


>-----------------------------------------------------------------------------------------------------------------


# Ingress Class
>Ingresses can be implemented by different controllers such as nginx, traefik etc with different configurations.

>each ingress should specify the class, a reference to an IngressClass resource that contains additional
>configuration including the name of the controller that should implement the class.

>without ingress class, ingress controller will not evaluate the ingress rules.

>using ingress class, we simply declare that, out of multiple ingress controllers, which ingress controller 
>should our ingress resource/rules implements.

>for every ingress controller , there is a ingress class, that we need to used in our ingress resource to tell
>that ingress resouce should use that ingress controller.


flow: Ingress_Resource -----> Ingress_Class -----> Ingress_Controller

>-----------------------------------------------------------------------------------------------------------------

>kubectl get ing
>kubectl describe ing
>


# configuring nginx_

/etc/nginx
cat nginx.conf | grep -A 10 </route name>



