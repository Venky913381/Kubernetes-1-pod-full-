>
>Instead of exposing each service independently , we use ingress controller to expose the multiple services 
>using same ip address. 

>Ingress controller allows us to manage all the functionalities like SSL, scallings, Auth, Cert within the k8s 
>cluster itself with a defination file, that lives along the rest of your application deployments file.

>ingress controller can perform load balancing , Auth, SSL and (Host)URL/Path based routing configuration by being 
>inside the cluster, living as a deployment or a DAEMON SET.

>Ingress helps user access the multiple application using single externally accessible URL, 
>that you can configure to route to different services within the cluster based on url, 
>at the same time terminates the SSL/TLS.

*-----------------------------------app--------------------------------------

apiVersion: v1
kind: Pod
metadata :
  name: app1 
  labels: 
    appname: app1 
spec: 
  containers:
    - image: nginx
      name: nginxapp2
      ports: 
      - containerPort: 8080



apiVersion: v1
kind: Service
metadata:
  name: app1service
spec:
  selector:
    appname: app1
    type: ClusterIP
    ports:
    - name: http
      port:  80
      targetPort:  8080 
      protocol: tcp     

>---------------------------------
apiVersion: v1
kind: Pod
metadata :
  name: app2
  labels: 
    appname: app2
spec: 
  containers:
    - image: coolgourav147/nginx-custom
      name: nginxapp2 
      ports: 
      - containerPort: 8080                   


apiVersion: v1
kind: Service
metadata:
  name: app2service
spec:
  selector:
    appname: app2
    type: ClusterIP
    ports:
    - name: http
      port:  80
      targetPort:  8080 
      protocol: tcp 

>---------------------------------------

>Path Based Routing_

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-test_path_based
spec:
  ingressClassName: trafeik

  rules:  
  - host: 
      paths:

      - path: /test1
        pathType: Prefix               # 8.8.8.8:6060/test1 --> app1service --> app1
        backend:
          service:
            name: app1service
            port:
              number: 80

      - path: /test2
        pathType: Prefix               # 8.8.8.8:6060/test2 --> app2service --> app2
        backend:                      
          service:
            name: app2service
            port:
              number: 80

*----------------------------------------------------***----------------------------------------------------------    

>ingress support both Path based routing and Host/Url/Name base routing, which have advantage over 
>other exposing services like node port, cluster ip ,Load Balancer.

>Instead of exposing each service independently , we use ingress controller to expose the multiple services 
>using same ip address. 

>Ingress controller, typically do not eliminates the need for external load balancer, 
>but it add extra layer of routing and control behind the load balancer.

>we only pay for one Load balancer or single ip provided by cloud provider and Ingress controller is 
>verstile enough to route various requests using simple Host or URL based routing.

>Ingress controller allows us to map multiple DNS names to single IP and using routing rules, we can route
>the traffic to the proper service based on its DNS names.

>DNS name only resolve to the IP, it can Not resolve to the "ip:port" combination, But in k8s we need to resolve
>to port number too, as node port service open our microservice on specific port.


> Ingress/Ingress_Resources/Ingress_Rule :--> 
    is an API object that manages external access (typically HTTP) to the services in the cluster.
    it provides Load balancing, SSL termination, and name based /host based virtual hosting. 

    It exposes HTTP and HTTPS routes from outside the cluster to services within the cluster.

    Traffic routing is controlled by rules defined by Ingress Rules. An ingress does not expose 
    arbitrary port or protocol. Exposing services are done using clusterip, NodePort or LoadBalancer.

> so, ingress resource is nothing but the set of routing rules that we provides to Ingress Controller, and based  
> upon provided rules defined in ingress resource, Ingress Controller routes the external traffic to various 
> services within the cluster.

    > There are two types of Ingress Rules
      1. Path Based Routing
      2. Host Based Routing


> Ingress Controller :--> 
    is the one that is responsible for implementing all the ingress rules, usually with 
    load balancer to help handle traffic.

  >  Ingress controller route the traffic only through DNS names, not through IP address, as all the routing
> >  rules are defined in Ingress Controller. i.e. Application are only accessible by DNS names and not through IP. 

    eg_ nginx, haproxy, voyger, istio, traefik...

>Ingress controller needs ingress resources/rule to function. Ingress resource is a native resource provided by k8s.
>similarly , we can use Nginx, HAProxy, Istio , traefik etc.. as a third party ingress Controller.

    
> Ingress Class :-->
    Ingresses can be implemented by different controller , such as Nginx, Traefik etc. often with 
    different configuration.

    Each ingress should specify a class, a reference to an 'IngressClass' resource that contains additional 
    configuration including the name of the controller that should implement the class.


>So, Ingress Resource is nothing but the set of rules, which Ingress Controller must implements in order to route 
>the traffic. And we must select the Ingress class, in order to define, which Ingress Controller we are using
>to implemets the ingress rules. 

*----------------------------------------------------------------------------------------------------------------- 

>Ingress exposes HTTP and HTTPS routes from outside the cluster to the Service within the cluster.
>Traffic routing is controlled by rules defined in ingress resource. 

>Ingress resource can not do anything on their own, we need to have an Ingress controller in order for ingress 
>resource to work. Thus, Ingress Controller implements the rules defined by Ingress Resource. we need to 
>declare ingress Class, in order to specify the ingress Controller, which implements the routing rules
>defined in ingress resource.


>Path based routing

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: path_based_ingress_example
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  ingressClassName: nginx

  rules:
  - host: 
    http:                         # will respond to any host i.e. it may google.com or xxxx.com or 8.8.8.8
      paths:                      # all it cares about is path .i.e. google.com/nginx or xxxx.com/nginx
       
      - path: /nginx              #host is configure using LB/R53 OR HAPROXY outside
        pathType: Prefix
        backend:
          service:
            name: app1service
            port:
              number: 80

      - path: /flask
        pathType: Prefix
        backend:
          service:
            name: app2service
            port:
              number: 80  



>-----------------------------------------------------------------------------------------------------------------

>Host based routing

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: host_based_ingress_example
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  ingressClassName: nginx

  rules:
  - host: nginx-app.com        # will responds to only this hosts
    http:
      paths:
      - backend:
          service:
            name: test-1
            port:
              number: 80 

  - host: flask-app.com
    http:
      paths:
      - backend:
          service:
            name: test-2
            port:
              number: 80   

>-----------------------------------------------------------------------------------------------------------------

>When would you use this?

Ingress is probably the most powerful way to expose your services, but can also be the most complicated. 
There are many types of Ingress controllers, from the Google Cloud Load Balancer, 
Nginx, Contour, Istio, and more. There are also plugins for Ingress controllers, like the cert-manager, 
that can automatically provision SSL certificates for your services.

Ingress is the most useful if you want to expose multiple services under the same IP address, 
and these services all use the same L7 protocol (typically HTTP). You only pay for one load balancer ip
if you are using the native cloud integration, and because Ingress is “smart” you can get a lot of 
features out of the box (like SSL, Auth, Routing, etc)


>------------------------------------------------------------------------------------------(below by vikram)....

>ref_ https://kubernetes.io/docs/concepts/services-networking/ingress/


# Issues with Cloud Load Balancer_

>The big downside is that, each service you expose with a LoadBalancer, it will get its own IP address, 
>and you have to pay for a LoadBalancer per exposed service, which can get expensive.

>with cloud lb, we need to pay for each of the service that is exposed using LB as the service. as service grows
>in number, complexity to manage SSL's, scallings, Auth..etc also increases.

>Ingress controller allows us to manage all the above functionalities within the k8s cluster itself with a 
>defination file i.e. ingress resource, that lives along the rest of your application deployments file.

>ingress controller can perform load balancing , Auth, SSL and URL/Path based routing configuration by being 
>inside the cluster, living as a deployment or a DAEMON SET.

>Ingress helps user access the application using single externally accessible URL, that you can configure 
>to route to different services within the cluster based on url, at the same time terminates the SSL/TLS.

>-----------------------------------------------------------------------------------------------------------------

# Ingress Controller_

>Ingress is the most powerful way to expose the service outside the cluster.
>it exposes multiple services using the same ip address.

>ingress controller, typically does not eliminates the need for an external load balancer- the ingress controller
>simply adds an additional layer of routing and control behind the load balancer.

>we only need to pay for one cloud load balancer ip address, if we are using any cloud native load balancer, 
>ingress is smart enough to route various requests using simple Host or URL based routing.

>this way we can avoid exposing each service independently and having ip's assign for each service.

>ingress controllers do not come with standard k8s binary, they need to be deploy seperatly.
>thay can generally implemeted by a third party proxy, that can read the ingress rules and adjust its 
>configuration accordingly.

>there are many ingress controller, like AWS ALB, Traefik, Nginx, Istio, Contour, HAProxy, voyger etc.

>there are also many plugins for ingress controller like cert-manager, that can automatically provision 
>SSL certificates for the services.

>ingress controller automtically provide features such as SSl, Auth , straight out of box. 
(SSl termination, i.e. we have HTTPS traffic till ingress, once traffic goes inside ingress it will simply be http)

>if we are running cluster on-prem, Ingress controller are to be exposed via NODEPORT and use Proxy
>like HAProxy between DNS server and Ingress Controller, unless we have other solution like MetalLB/CloudLB.
(see, rahul wagh video)

>-----------------------------------------------------------------------------------------------------------------

# Ingress Controller VS Ingress Resources_

Ingress/Ingress Resources/Ingress Rules: 

>An API object that manages external access to the services in a cluster, typically HTTP.
>Ingress may provide load balancing, SSL termination and name-based virtual hosting.

>Ingress exposes HTTP and HTTPS routes from outside the cluster to services within the cluster. 
>Traffic routing is controlled by rules defined on the Ingress resource.

>load balancing , Auth, SSL and URL/Path based routing configuration by being 
>inside the cluster, living as a deployment or a DAEMON SET

>An Ingress does not expose arbitrary ports or protocols. Exposing services other than HTTP and HTTPS to the 
>internet typically uses a service of type Service.Type=NodePort or Service.Type=LoadBalancer.

>so, ingress resource is nothing but the set of rules that we provides to Ingress Controller. and based upon 
>provided rules defined in ingress resource, Ingress Controller routes the traffic.


Ingress Controller:

>is one  responsible for the implemetation of the all ingress rules, usually with a load balalncer, to help
>handle the traffic.
>even ingress controller acts like a proxy inside k8s platform.

>-----------------------------------------------------------------------------------------------------------------

# Path Based Routing _

>in path based routing , NO host is specified, so the rule applies to all inbound HTTP traffic through
>ingress controller. 
>it will respond to any of the Host, all it cares about is the path, Not the Host. so host can be anything
>like nginx.com or xxxx.com but the path i.e /<path> , is all it cares about.

>every path is associated with backend service of clusterIP type and a port on which service listen on.

>pathType is mandatory and supports 'EXACT' and 'PREFIX' types

>a default backend is often configured in an ingress controller to servive any request that do not match a 
>path in a spec , typically custom 404  pages. it is not defined in ingress rules.


>eg_

- host:                    # any host, eg_ xxx.com
    http:                     
      paths:
      - path: /nginx           # http:xxx.com/nginx
        pathType: Prefix
        backend:
          service:
            name: test-1
            port:
              number: 80

>This is useful, when we are exposing multiple microservice in same application, using different /paths.
eg_ www.google.com/gmail or www.google.com/drive or www.amazon.co.in/wishlist or www.amazon.co.in/orders

>In this case, all we care about is the path to perticular microservice. Host may be anything that mapped to
>any DNS or application is even accessible on IP:PORT/PATH combination.

>in this case, we need not proxy server like HAProxy, as we are not resolving IP:PORT combination to any DNS.



*                                     *********************************

# Host/Name/URL Based Routing _

>in Name/URL based routing , all inbound HTTP traffic through the ingress controller are routed according
>to the host URL.
>Ingress controller matches the host url in the http header to match the requests with the ingress rules.

>eg_

  rules:
  - host: nginx-app.com     
    http:
      paths:
      - backend:
          service:
            name: test-1
            port:
              number: 80 

>this is useful when , we are exposing completely different application/Microservice using seperate dns.
eg_ www.google.com / www.flipkart.com / www.amazon.co.in 
>ip address behind all the dns is same.
>it will respond to only specific host as declared in rule. 

>In this case , all we care about is the DNS name, application is only accessible over its DNS name configured
>in a Ingress. application will not be accessible on IP:PORT combination. 

>In this case, we need a proxy like HAPROXY to resolve the IP:PORT combination to DNS.
>and need to map the DNS name to HAProxys IP address.
>OR, if we have a external Load Balncer, we can expose ingress Controller as a Load Balancer.

>-----------------------------------------------------------------------------------------------------------------

# Ingress Class

>we can have multiple ingress Controllers running inside the cluster, like Nginx, Traefik etc. In order
>to decide which ingress Controller, should the Ingress Resource/Rule implement, we must declare ingress class.

>Ingress Rule , responds to only one IngressController , that is why it is necessary to declare the Class. This
>specifies that ,the rules specified in perticular ingress Rule , must be implemented by given ingress Controller.

>Ingresses can be implemented by different controllers such as nginx, traefik etc with different configurations.

>each ingress should specify the class, a reference to an IngressClass resource that contains additional
>configuration including the name of the controller that should implement the class.

>without ingress class, ingress controller will not evaluate the ingress rules.

>using ingress class, we simply declare that, out of multiple ingress controllers which might be running in 
>our cluster, which ingress controller should our ingress resource/rules implements.

>for every ingress controller , there is a ingress class, that we need to used in our ingress resource to tell
>that ingress resouce should use that ingress controller.


*flow: Ingress_Resource ----> Ingress_Class ----> Ingress_Controller (Implements the rule) ----> Routing....

>-----------------------------------------------------------------------------------------------------------------


How Ingress Controller Decides to route traffic to specific application using its DNS/URL:


>Using ingressController , we can map multiple DNS name to single ip address and all the mapping rules
>are declared in a ingress resource which resides inside the k8s as either deployment or as a daemon set.

>But how ingress controller or load balancer will decide which dns/url have user provided on his browser ? which
>is not reside within k8s cluster anyway, i.e. how ingress controller know that , which application does user 
>wants to access, as all the DNS names are mapped to single ip address.

>this is decided using HTTP headers, 
>if, we inspect the page of any website, and inspect its headers it in network section (reload the page),
>we will get , to what DNS name the IP address is mapped to.

> OnBrowser ---> Inspect ---> Network ---> Headers (reload the page) ---> select the DNS ---> 
Request URL: https://www.google.co.in/
Request Method: GET
Status Code: 200 
Remote Address: 142.251.42.67:443

>this HTTP headers is transffered to the receiving server, and the receiving server can read the HTTP Headers
>from the requests. i.e. once header is trasffered to the receiving server, it will get know , that from which
>DNS/URL the request is made.

*                               **********************************************

>All cloud service provider (GCP,AWS, Openshift, Digital Ocean) comes with their own load balancer which can 
>help us exposing internal service deployed inside kubernetes cluster to the external world.

>now, suppose, we are not using Cloud LoadBalancer to expose the Ingress Controller and instead we are using 
>NodePort service to expose the Ingress controller on specific port number. 
>In this case, Ingress controller will not have any DNS name to resolve , Ingress Controller only resolve to 
>the DNS name and not to the IP:Port combination. 

>to solve this, we need to use HAProxy, the HAProxy will listen on some port (80) on its frontend and 
>at is backend it is configured to resolve the ip-port combination to Ingress Controller. 

>if we are having multiNode cluster, the IP can any ip in the cluster.
>and the HAProxy will have an ip , which we can mapped to the DNS name. and we can access the application
>using those dns/url in our browser.

DNS/URL  ----> FE-hap ---->BE-hap ---> IC ----> (IC will evaluaute IR)IngressRule ---> Application
>www.xyz.com ----> *:80 ----->100.0.0.2:8080 -----> IC---> /path/ or Ingress Rule -----> microservice


>ref_ https://jhooq.com/ingress-controller-nginx/

>1.Install/setup HAProxy on kubernetes node (refer link)
>2.Update frontend, backend configuration of haproxy.cfg (/etc/haproxy/haproxy.cfg)

*HAProxy_frontend_
frontend Local_Server             # frontend is local server
    bind *:80                     # listen to all request
    mode http                     
    default_backend k8s_server    # will communicate with k8s_server at its backend


*HAProxy_backend_
backend k8s_server                 # it is backend server, it will listen to frontend
    mode http
    balance roundrobin             # load balancing in RRB method
    server web1.example.com  100.0.0.2:8080    # this will communicate with k8s cluster on ip 100.0.0.2:8080


>Now, we can procceed with setting up of Ingress Controller and Ingress Rules.

>-----------------------------------------------------------------------------------------------------------------

>kubectl get ing
>kubectl describe ing

>-----------------------------------------------------------------------------------------------------------------

# configuring Nginx as Ingress Controller_

>to use nginx as ingress controller

ref_ https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/
ref_ https://github.com/kubernetes/ingress-nginx  (See the Getting Started document.)
ref_ https://kubernetes.github.io/ingress-nginx/deploy/

>( kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx
>   /controller-v1.5.1/deploy/static/provider/cloud/deploy.yaml )                 --->FOR CLOUD
                                                                                  ...> check docx for all providers
>( kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx
> /controller-v1.5.1/deploy/static/provider/baremetal/deploy.yaml )               --->FOR BARE-METAL

>all the Controller related objects will be created in seperate "ingress-ngix" Namespace.
>name of Ingress Class is "nginx"

>Our microservices pod and services may be in their seperate namespace or at default namespace.

>Nginx Ingress Controller will be implemeted as NodePort service.
>The ingress Controller pod can be accessed on_ 
 <clouds_cluster_ip -or- clusterIP>:<port_of_NodePort_Service>/<Path (if path based)>

>kubectl get po,svc,ing -n ingress-ngix



>                                   ***************************************


# configuring Traefik as Ingress Controller_

>to use traefik as ingress controller

ref_ https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/
ref_ https://doc.traefik.io/traefik/getting-started/install-traefik/#use-the-helm-chart


>traefik ingress controller can be install only as Helm Chart. it will listen to kubectl.
 >helm repo add traefik https://helm.traefik.io/traefik
 >helm repo update
 >helm install traefik traefik/traefik

>Exposing the Traefik dashboard
kubectl port-forward $(kubectl get pods --selector "app.kubernetes.io/name=traefik" --output=name) 9000:9000
OR: ---->
>1.kubectl get pods --selector "app.kubernetes.io/name=traefik" --output=name
>2.kubectl port-forward <name of pod obtain from above > 9000:9000


>enable metalLB in cluster for load balancing. (on minikube)
 minikube ip
 minikube addon list
 minikube addon enable metallb
 minikube addon configure metallb ---> { range of ip 192.168.99.150 >enter-button< 192.168.99.160 }


>all the Controller related objects will be created in "default" Namespace.
>name of Ingress Class is "traefik"

>Traefik Ingress Controller will be implemeted as NodePort service. 
>if MetalLb/LB is configured it will be run as LOADBALANCER Service.

>microservices are exposed as cluster ip services.

>traefik itself have its own dashbaord , which is exposd as internal cluster ip service

>kubectl get po,svc,ing


*                                   ***************************************


Is Ingress Controller any different than Reverse Proxy :
>NO, they do the same things , but with Ingress Controllers there are few advantages_

reverse proxy servers like Nginx, needs a proper configuration to redirect requests to backend/other services
depending upon the requests.

Every time a backend changes the configuration needed to be modify accordingly, so when we add a new service 
to the cluster we need to configure "proxy_pass" to proxy the request to correct backend services.


>With Ingress, these redirect rules in the form of Ingress resource, are automatically loaded by the 
>ingress controller, which is serving as reverse proxy.

>It is nothing but the preconfigured ReverseProxy server that always watches for any configuration changes
>in the cluster.

>So, when a user deployes new Ingress resource, Ingress controller automatically adds it to its configuration.
>it allows the Hot loading of the configuration. 
>which makes us able to make changes in our ingress resource on the fly without downtime.



>we can check route in nginx conf file
/etc/nginx
cat nginx.conf | grep -A 10 </route name>


read more on HAProxy_ :
>ref_ https://jhooq.com/ingress-controller-nginx/
>ref_ https://www.haproxy.com/documentation/hapee/latest/configuration/config-sections/frontend/#

>-----------------------------------------------------------------------------------------------------------------