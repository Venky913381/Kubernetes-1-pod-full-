>
>Service in k8s

>we need a services for enabling the pod-to-pod communication, also to enable external traffic to access 
>microservice/app deployed in k8s pod.

>services can be defined through yaml manifest files or using imperative command. and can be deployed using 
>kubectl apply -f <service_file.yaml> command.

>Port :- port in service manifest file, represents the actual port that service will listen on. if service listens 
>        on port 3000, we can access the service through its <service_name>:3000

>Target Port :- target port represents the actual Container Port . it should match the container port
>               in the pod manifest file.

>Node Port: Node port represents the port of the Node , from which external traffic access the service. 
>           It is used with Ip address of the node/ec2 , and serice will be accessible.

>type : type represent the type of the service.

>flow :  <ip_address>:NodePort ------>Port ------>TargetPort---->Microservice   {for nodePort service}

>--------------------------------------------------------------------------------------------------------------

>Cluster IP_

>cluster IP makes the service available within the cluser, So that pod to pod communication becomes possible.
>ClusterIp service is available within cluster only, to access application out of cluster we need to go for other
>types of services. 


>service_for_pod_

apiVersion: v1
kind: Service
metadata:
  name: flask-cluserip-service

spec:
  type: clusterIP
  ports:
  - name: http
    port: 80               #containers port, we need to open this port on container using 'containerPort'        
    targetPort: 5000       #port of pod/ on this port service will listen
    protocol: TCP           

  selector:
    app: myapp  

>pod for service_

apiVersion: v1
kind: Pod
metadata:
  name: myapp
  labels:
    name: myapp
spec:
  containers:
  - name: myapp
    image: nginx

    ports:
      - containerPort: 5000  #service will target this port to access microservice in container.

>--------------------------------------------------------------------------------------------------------------

>End Points

>endpoints tracks the ip addresses of the k8s object,that the service send traffic to.

>when a service selector matches a pod label, ip of that pod get added to your endpoints.
>i.e EndPoints are the final termination point of your microservice deployed in pod.

>the endpoints for a service can be found by
  kubectl describe svc <service name>
  kubectl get ep <service name>

>if we do not define the matching labels, i.e. selectorless service, we need to define 
>endpoint objects explicitly for our service.

>--------------------------------------------------------------------------------------------------------------

>for multicontainer deployment , we may need a service which exposes the multiple ports for each container.


>multi-port service_

apiVersion: v1
kind: Service
metadata:
  name: flask-cluserip-service

spec:
  type: clusterIP
  ports:
  - name: http
    port: 80            
    targetPort: 5000    
    protocol: TCP

  - name: https
    port: 443         
    targetPort: 7000    
    protocol: TCP  

  selector:
    app: myapp  

>multi-container pod

apiVersion: v1
kind: Pod
metadata:
  name: myapp
  labels:
    name: myapp
spec:
  containers:
  - name: frontend
    image: nginx
    ports:
      - containerPort: 5000 

  - name: backend
    image: nginx
    ports:
      - containerPort: 7000        


>--------------------------------------------------------------------------------------------------------------      


>Port Forwarding_ 

>Port forwarding is the way to Temporarily Communicates with applications in your cluster without
>exposing them to the public internet for security reasons.

>to achieve this, the port-forwarding command allows us to securely forward a port on your local machine
>through the k8s API server to a POD running in your cluster.

>you can use this method to investigate issues and adjust your services locally without the need 
>to expose them beforhand

>kubectl port-forward , give us a direct network access to port of a pod for test purpose.
>it establishes a tunnel from the target pod to your localhost.
>The command requires you to define the type or name of the resource as well as local and remote port numbers.

>syntax_
kubectl port-forward --address <local-IP> <res-type>/<res-name> <local-port>:<resource-port> -n <namespace-name> 

>eg_
>kubectl port-forward --address 0.0.0.0 svc/<serviceName> <PortOnHost>:<PortOnPod>
>kubectl port-forward --address 0.0.0.0 svc/<Service-Name> --namespace <NameSpace Name> Machine/HostPort:PodPort

>--------------------------------------------------------------------------------------------------------------

pod-to-pod communication_ (without Service):

>for pod to pod communication, we can use A/AAAA DNS record types.   

>pod in k8s are ephemeral , as even if we deletes/dies the pod, the deployment object will recreates the pod,
>and the ip address of the pod will get changed. i.e. IP's addresses of pod is not stable.
>So communication through ip address is not prefferable. That is why , we preffer communication via DNS address.

>However, DNS resolution just by pod name is not possible in k8s. In case of clusterIP service 
>it is possible, as Name of clusterIP service resolves to clusterIP service itself. that is why we use service as
>a abstraction/ proxy to expose the pod to the traffic.

>Pod to pod communication without service do not load balances the requests.

>address syntax
  <pod's_ip_address>.<namespace_name>.pod.cluster-<domain.example>   ---->fqdn
>eg_
  172-17-0-3.default.pod.cluster.local 

>pod to pod communication via IP:port combination is only possible if pod is running and we are able to
>get ip address of the pod, however if pod recretes itself , gettting pod if dynamically is not possible.

>if we have pod ruuning, we can achieve pod to pod communication as_
   http>//ip:port  
port is not a service port, but the port to which application listens like 3306 for mysql db, 5432 for postgres db.   


>                                     ********************************


pod-to-pod communication_ (with ClusterIP  Service):

>pod-to-pod communication with Service, each service gets its own IP address.

>each service will have incoming port and target port i.e. containers port.
>It always load balances the incoming requests between replicas.

>service acts like a proxy placed before the pods, and pods are mapped to service with help of labels.

>service ips are stable, it balances the requests. so even if pods ip changes,it will redirect the traffic to
>to correct pod, selected via labels using selectors.
>clusterIP is more suitable for stateless applications.

>syntax_
http://<service_name>.<namespace_name>.svc.cluster.local:<Port>    ---->fqdn

>http://<service_name>.<namespace_name>.svc.cluster.local
>the above fqdn will resolve to the ip address of clusterIP service. 
>every clusterip service will get a internal ip.


http://svc/port 
>above will resolve to the actual ip address of the service, this is done by quering the Core DNS service
>which is responsible for DNS resolution with k8s environment. Core-DNS runs in kube-system namespace and 
>through kube-dns service which runs in same kube-system namespace we can access this core-dns , which is 
>either runs a Deployment or DaemonSet.

> to access the Core DNS a created a service inside the same kube-system namespace. and through the ip address
> of this service we can access the core dns.  This ip address is added to all the pod added in the cluster
> under /etc/resolve.conf

>--------------------------------------------------------------------------------------------------------------

Can we access a ClusterIP service from the internet :

>Turns out that, we can access clusterIP service from outside using the Kubernetes proxy. 

apiVersion: v1
kind: Service
metadata:  
  name: my-internal-service
spec:
  selector:    
    app: my-app
  type: ClusterIP
  ports:  
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP

>Start the Kubernetes Proxy:
kubectl proxy --port=8080    

>Now, you can navigate through the Kubernetes API to access this service using this scheme:
http://localhost:<port_no>/api/v1/proxy/namespaces/<NAMESPACE>/services/<SERVICE-NAME>:<PORT-NAME>/

>eg_ http://localhost:8080/api/v1/proxy/namespaces/default/services/my-internal-service:http/

>When would you use this?
There are a few scenarios where you would use the Kubernetes proxy to access your services.

Debugging your services, or connecting to them directly from your laptop for some reason
Allowing internal traffic, displaying internal dashboards, etc.
Because this method requires you to run kubectl as an authenticated user, 
you should NOT use this to expose your service to the internet or use it for production services.

>--------------------------------------------------------------------------------------------------------------