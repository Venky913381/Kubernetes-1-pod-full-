>
*HELM_CHARTS_

>Below is the default project directory structure of the helm chart project.

sample_project/
|
├── Charts/
├── chart.yaml
├── values.yaml
├── templates/
│   ├── NOTES.txt
│   ├── _helpers.tpl
│   ├── deployment.yaml
│   ├── hpa.yaml 
│   ├── ingress.yaml
│   ├── service.yaml
│   ├── serviceaccount.yaml
│   └── tests/
│           └── test-connection.yaml
|
└── requirements.yaml (helm 2.0 version, deprecated in 3.0 version)
└── readme.md         (optional, not available in v3.0, needed to be created)
└── LICENCE           (optional, not available in v3.0, needed to be created)
├── index.yaml        (optional, not available in v3.0, needed to be created)


>charts/
manually managed chart dependancies can be placed in this directory.

>templates/
this directory contains templates file like deployments, service and many more as shown above.

>charts.yaml
A yaml file with metadata about the chart, such as chart name and version, maintainer information,
a relevant website and search keyword.

>values.yaml
a yaml file of default configuration values for the chart.

>helpers.tpl
this is where we will declare our functions

>Test
before doing actual deployment,  we we want to do some testing, we will do it here.
 
>requirements.yaml (deprecatred)
in this yml file we define charts dependancies, so that it can be download dynamically.



>-------------------------------------------------------------------------------------------------------------

>helm create <chartname>
>helm install <release_name> <chart_name>       / --debug --dry-run
>helm uninstall <release_name> <chart_name>
>helm list -a

>helm upgrade <release_name> <chart_name>    # after making changes to the chart
>helm lint <chart_name>
>helm template <chart_name>                  # will create a templates of the deployment yml's with all values

>helm repo add <repo_name> <repo_url>
>helm repo list
>helm repo update
>helm search repo <repo_name>
>helm repo index <chart_name>      # will create index.yml file for chart
>helm repo remove <repo_name>


>helm search repo <chart_name> --versions      # will list out all the chart versions
>helm show readme <repo>/<chart> --versions <specific_version>   # will give the readme file for that version

>helm install <release_name> <repo_name>/<chart_name>     / --debug --dry-run
>helm install <release_name> <repo>/<chart> --values=<chart-values.yaml> --namespace <app_ns> --version <version>
   # to provide external values file, such as password, username etc.

*WordPress_App_via_Helm
>ref_https://jhooq.com/helm-chart-wordpress-installation/



>helm plugin install <plugin_url>
>helm plugin list
>helm plugin uninstall <plugin_name>

*Diff_Plugin_
helm plugin install https://github.com/databus23/helm-diff
>helm diff revision <chart_name> <version1> <version2>     #revision is just comparison paramenter,there are others too
>helm plugin list
>helm plugin uninstall diff



>helm install --set <param=value> <release_name> <chart_name>
>helm upgrade <release_name> <chart_name> --set <param=value>  -->to override the existing parameters in values file
>helm install --set replicaCount=<n> <release_name> <chart_name>    # using helm cli commands.

>helm install -f <custom_value_file> <release_name> <chart_name>
>helm show values <global_name i.e. chart/repo>  ---> shows the values file in chart

*ref_https://jhooq.com/helm-pass-environment-variables/
*ref_https://jhooq.com/helm-multiple-values-files/
*custom_value_file_

myvalue.yml
replicaCount: 2
image: nginx:2.3.1
imagePullPolicy: Never

>helm install -f myvalue.yml <release_name> <chart_name>



>helm upgrade <release_name> <chart_name> 
>helm rollback <release_name> <revision_version>
>helm delete <release_name>
 


>



>----------------------------------------------------------------------------------------------------------

>helm install <release_name> --debug --dry-run <chart_name> 
verify/debug/validate by contacting kubernetes api server before actual deployment. it will not install chart.

>helm template <chart_name>
verify/debug/validate without contacting kubernetes api server before actual deployment.

>helm lint <chart_name>
check for the syntactical error in configuration files, if found promt user with details.

>helm rollback <release_name> <revision_version>
Even if, we roll backs to previous version, the version number will increase, 
in order to signify the new deployment that what was earlier.  

>helm install <chart_name> --generate-name
in helm it is necessary to provide release name, if not provided helm produce error, if we are 
not providing release name , we can use --generate-name flag to auto generate release name.


>other naming issues with helm release that causes errors_ (release_name naming conventions)_error cases

Helm release name consists of upper-case        (ex - helm install demoChart helloworld)
Helm release name consists of blank spaces      (ex - helm install demo Chart helloworld)
Helm release name consists of special character (ex - helm install demoCh@rt helloworld)

>                    Release Name	          Reason for failure
1	Release Name  ---> 	demoChart	 --->  Release name contains Uppercase character
2	Release Name  ---> 	demo Chart --->  Release name contains Blank space
3	Release Name	--->  demoCh@rt	 --->  Release name contains Special Character

>-------------------------------------------------------------------------------------------------------------

HelmFile:

*ref:https://jhooq.com/helmfile-manage-helmchart/    , for all details and mode.

>1.You can bundle several Helm Charts into a Single Helmfile to manage your kubernetes eco-system
>2.Helmfile helps you to keep isolation between the different environments(developemnt, staging, production)

>3.It can help you to identify the differences between the new changes which you want to apply 
>  against the existing running deployment inside kubernetes cluster

>4.Helmfile uses the Go Templates which lets you templatify your Helmfile and also you can use Sprig 
>  Library with functions - requiredEnv, exec, readFile, toYaml, fromYaml, setValueAtPath, get, tpl, required, 
>  fetchSecretValue, expandSecretRefs

>5.With the help of HelmFile you can deploy multi-tier applications inside kubernetes cluster.

>helmfile --help
>helmfile --version
>helmfile sync
>helmfile

>helmfile.yaml -->

releases:
   - name: helloworld      #release name
     chart: ./helloworld   #chart name/chart path
     installed: true       #if not given, will not install helm chart

   - name: testversion
     chart: ./testchart
     installed: true       #installed: false, to uninstall chart

>helmfile sync  : to run helmfile and install charts in helmfile.   



>Use GitHub repository for installing helm chart using Helmfile 

>first, install helm git plugin, it is needed to work with git and git url syntax

The one more feature of Helmfile which I like the most is - you can even install the helmchart 
from remote repository such as GitHub, Google Container Repository, AWS ECR

Add the following configuration attributes for working with remote repository -
1. Repository name - helloworld
2. Repository URL - git+https://github.com/rahulwagh/helmchart@helloworld?ref=master&sparse=0

>urlsyntax :- git+https://<url without .git>@<name of helm_chart>?ref=master&sparse=0

repositories:
  - name: helloworld
    url: git+https://github.com/rahulwagh/helmchart@helloworld?ref=master&sparse=0

releases:

  - name: helloworld
    chart: helloworld/helloworld
    installed: false 

Now you can run the $ helmfile sync command for installing the helm chart from remote repository


>-------------------------------------------------------------------------------------------------------------