>

>Desired state is core concept in k8s.
>through declarative or imperative Api, we describe the desire state of the objects 
>like pod, rs, deployment in the cluster.

>if due to some failures , a pod stops running/dies , the kubelet recreates the pod based on the lines of desired
>state stored in etcd.

>kubeController managers in the master responsible for the regulating the state of the system. if they
>detects any drift in current state of the cluster, they instruct the kubelets components in the worker
>to spin up the additional pods depends on the desired state.
>this way k8s ensured that all the containers running across the cluster are always in the desired state.
>we need a controller for our application , for the purpose of Relibility, LoadBalancing, Scalling.

>https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/

>Replica set is higher level objects that gives ability to easily run multiple instance for given pod.
>it works similat ro replication controller.

>Replica set uses SET BASE SELECTORS to manage pods.

>the major difference between RC AND RS is the Rolling-Update command , which works with Replica set  
>but wonts works with Replication Controller . 
>This is becouse rs are meant to be used as a backend for the Deplyments.

>Deployments are recommanded over Replica Set.


>Replica Set, using Match Labels

apiVersion: apps/v1
kind: ReplicaSet

metadata:
  name: rs
  labels:
    type: frontend

spec: 
  replicas: 3                   #if we specify multiple matchLabels, and if existing pods do not match all labels 
  selector:                     #then all new pods with multiple labels will be created.
    matchLabels: 
      appname: app              #labels must match to the container label, else will give error
  template:                     #able to match only one label , with existing pods.
    metadata: 
      name: pod1
      labels: 
        appname: app            
    spec:    
      containers:
      - name: container 
        image: coolgourav147/nginx-custom

>-------------------------------------------------------------------------

apiVersion: v1
kind: Pod

metadata:                 >sample pod
  name: pod
  labels: 
    appname: app
    type: frontend
spec:
  containers:
  - image: coolgourav147/nginx-custom
    name:  my-name   

>-----------------------------------------------------------------------

>Replica Set, using Match Expression

apiVersion: apps/v1
kind: ReplicaSet

metadata:
  name: rs
  labels:
    type: frontend

spec: 
  replicas: 5                  
  selector:                   
    matchExpressions:
    - key: appname
      operator: In 
      values:
        - app              #pod must have all labels, .i.e. appname and type. only one will not work.
        - app2             #pod needed to have at least one of above 2 label  to be controlled by RS.
                           # will select all pod having Labels, appname-->app or app2 and type-->frontend
    - key: type            > but, it will not select any app, app2 with type backend.
      operator: In 
      values:
        - frontend

    - key: type
      operator: NotIn 
      values:
        - backend 


  template:                    
    metadata: 
      name: pod3
      labels: 
        appname: app            
    spec:    
      containers:
      - name: container 
        image: coolgourav147/nginx-custom    


> kubectl get rs   -o wide/ --show-labels
> kubectl apply -f <rs.yaml>
> kubectl delete -f <rs.yaml>
> kubectl delete rs <rs-name>      

>-----------------------------------------------------------------------------------------------------------------

>can also be written as_

selector:                   
    matchExpressions:
    - {key: appname, operator: In, values: [app1,app2]}

>----------------------------------------------------------------------------------

> In MatchLabels in rs file, conditions given under match labels will be considered and treated as LOGICAL AND. 
>i.e pod will need to match the all conditions to be controlled by rs.

selector:                   
    matchLabels: 
      appname: app
      type: frontend        # LOGICAL AND
      owner: swapnil

>pod neded to have all the labels as shown above to be controlled by RS. i.e each label is AND operated.

>----------------------------------------------------------------------------------

>In Match Expression in rs file, conditions given under match Expression's KEY will be 
>considered and treated as LOGICAL OR. (i.e within single KEY)
>i.e pod will need to match at least one conditions to be controlled by rs.

matchExpressions:
    - key: appname
      operator: In 
      values:
        - app1             # LOGICAL OR
        - app2
>pod needed to have at least one of above 2 label  to be controlled by RS.      


>However, if there are multiple matching expressions then , conditions defined by each KEY will considered
>and treated as LOGICAL AND. (i.e. with multiple Keys)

matchExpressions:
    - key: appname
      operator: In 
      values:
        - app1 
        - app2             #any one will work i.e. LOGICAL "AND" BETWEEN TWO KEYS
    - key: type
      operator: In 
      values:
        - frontend         #pod must be frontend in either app1 and app2

>as we have given two different conditions under match expression, two key will be considered as Logical AND.
>i.e pod must match the both both key as values.        

>----------------------------------------------------------------------------------