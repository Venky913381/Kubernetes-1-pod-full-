>
>1) read, Cluster IP service
>2) read, Headless Service

>if a headless service manages more than one pod, service dns name will return a lists of pods managed
>by the service. The requests will accept the first IP address returned.

One of the misconception with Headless service is that, it do not Load Balances the request.
Even though headless service return the ip addresses of the pods, it will still load balances the 
requests to the pods and this type of load balancing is called as DNS ROUND ROBIN LOAD BALANCING.

> Headless service will Not always forward the reuest to first pod.

>curl <headless_service_name>:<container_port>  ---> this request is directaly forwaed to backend pod through
>    DNS ROUND ROBIN LOAD BALANCING mechanism and for each dns quesy/request it will result in new ip address
>    as headless service is load balancing the requests. 

>However, headless service , whenused with StatefulSets provides a 
>unique identity to each pod managed by StatefulSet

>--------------------------------------------------------------------------------------------------------------

# SteteLess Applications vs Stateful Application

>Stateless Application_

1> stateless applications do not depends on state, i.e. it do not saves the client data generated in one session
   for use in next session with that client. It also do not need permanant storage.
   eg_ nginx, apache, nodejs

2> we can simply scakles a stateless application by deploying it on multiple servers, 
   it easily scales Horizontally.

3> this applications are much faster and needs no external storage or backup.

>Stateful Application_

1> stateful applications depends upon state of the application, i.e. it saves the client data 
   generated in one session for use in next session with that client. It also need permanant storage.
   eg_ Databases, kafka, elasticSearch

2> In mordern web application, the stateless application connects with steteful applications to serve the
   users requests.

3> A stateful application needs a persistant storage for it to store its state and read later.

4> needs to maintain users data in cases of n/w or storage failure.

> User -------> Stateless Application ------->Stateful Application.

>--------------------------------------------------------------------------------------------------------------

# Stateful Sets_

>A statefulSets is a k8s controller used to run teh stateful application as containers/Pods in kubernetes cluster
>and manages the desired and current state.

>However, we do have other controller ReplicaSet, ReplicationController, Deployments, that 
>provide similar functinalities like StatefulSets. 
>However there are certain parameters taht are unique to StatefulSets_

>Instead of generating random names of pods like Replication Controller or Replica Sets, 
>Stateful sets generate stable name for each and every pod, so it becomes easier to identify the master pod
>by all other pods.

1> Data Replication :-

> In case of deployments, each pod gets a random identity with hash of a RS and Pod Attached.
> Pod gets a new identity i.e hostname and Ip , across restart and reschedule. 

> but in case of stateful application, we need a pod with stable IP , 
> so that the write/read request or in case of other pod replicate the data from pod 
> can be redirected to it in consistance manner even in case of pod recretaion.
>

2> Sticky / Indentity Hostname :-

> Each pod created by StefulSet has a ordinal value (0 through # replicas -1 ) and a stable n/w id, which is
> '<statefulsetname>-ordinal' assigned to it.

>this makes it easier to make a perticular pod as master/primary and make other pods to replicate the data 
>from this master pod

>if the pod dies, a new pod is created with SAME NAME, so replication algorithm wont break.

>So, How to setup pod to pod communication, so that other pod can copy data from main pod,
>again , pod created by replication set , upon recretion will retain the old name but ip address will change.
>and we can not set the communication between pod via name, bcuz, pod to pod dns resolution is not possible.
>we have dns resolution byt fqdn will have a pod's ips address.


>can we use clusterip service ?
>NO, becouse, request will always be load balances among the replicas.

>can we use name of the pod ?
>NO, becuse, pod to pod communication via name is  ot possible.

>can we use Headless service name ?
>NO, becouse, the request may go to replicas as service always load balalnces the requests (dns round robin).

>Stateful sets when combined with headless service, gives a unique identity to each pod which is_
 <statefulset_name>-ordinal.<headless_svc_name>
> eg_ mysql-0.db  -->a unique fqdn

>
    In stateful apps, the instance must have unique and persistance identity (stable hostname, IP's)
    that does not changes with restart or recreation or reschedule. 
    This makes it easier to elect a master instance.

    For stateful application with a stateful controller, it is possible to set the frst pod as primary and other
    pods as replicas.

    The first pod will handle both read and write requests from user and other pod always sync with the first
    pod for data replication.
    if the pod dies a new pod will get created with same name.



3> Stable Persistant STorage_

> Every stateful set pod will have a pesistance storage which is provisioned using PVC and PV 
> either statically or dynamically using storage classes. 


4> Ordered Creation ,Deletion and Upgrades_

>Stateful sets assign a sticky identity- an ordinal number starting from zero.

>by default, statefulset pod are deployed in sequential order an are terminated in reverse ordinal.

>a new pod is created by cloning the previous pods data unless the pod ordinal's zero.

>if the previous pod is in pendig state, then the new pod will not be created. in case of database pods,
>second pod will get created and then it will replicate data from first pod, 
>only after that third pod will get created and then that pod will replicate data from second pod.

>if we delete the pod, it will delete the pod in reverse order, not in randm order. By doing this, the replication
>algorithm is maintained.

>for example, if out of four replicas, if we scaled down to 3 , then only pod number 3 will be deleted. 

>------------------


>Statefulset are valueable for application that requires one or  more of the following_

1> stable, unique network identifiers with help of headless service.
2> stable, persistant storage
3> ordered, graceful deployment and scalling
4> ordered, automated rolling updates

>--------------------------------------------------------------------------------------------------------------


>StatefulSet Headless Service_

apiVersion: v1
kind: Service
metadata:
  name: nginx
  labels:
    app: nginx
spec:
  ports:
  - port: 80
    name: web
  clusterIP: None                      # clusterIP: None , as it is headless service
  selector:
    app: nginx


>StatefulSet_

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: web

spec:                                   # Deployment specs
  selector:
    matchLabels:
      app: nginx                        # has to match .spec.template.metadata.labels
  serviceName: "nginx"
  replicas: 3                           # by default is 1
  minReadySeconds: 10                   # by default is 0
  template:
    metadata:
      labels:
        app: nginx                      # has to match .spec.selector.matchLabels
                                        
    spec:                               # Pod specs inside the deployement spec
      terminationGracePeriodSeconds: 10
      containers:
      - name: nginx
        image: registry.k8s.io/nginx-slim:0.8
        ports:
        - containerPort: 80
          name: web
        volumeMounts:
        - name: www
          mountPath: /usr/share/nginx/html

  volumeClaimTemplates:
  - metadata:
      name: www
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "my-storage-class"
      resources:
        requests:
          storage: 1Gi



>StatefulSet ClusterIP Service_

apiVersion: v1
kind: Service
metadata:
  name: nginx
  labels:
    app: nginx
spec:
  ports:
  - port: 80
    name: web
  type: clusterIP                     
  selector:
    app: nginx



>--------------------------------------------------------------------------------------------------------------




>kubectl get sts
>kubectl get pv
>kubectl get pvc    
  h  hjghj  bbnm     

  swapnil           