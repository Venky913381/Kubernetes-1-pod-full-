>

>1) read, Cluster IP service
>2) read, Headless Service
>3) read, pod-to-pod communication in clusterip file

>if a headless service manages more than one pod, service dns name will return a lists of pods managed
>by the service. The requests will accept the first IP address returned.

One of the misconception with Headless service is that, it do not Load Balances the request.
Even though headless service return the ip addresses of the pods, it will still load balances the 
requests to the pods and this type of load balancing is called as DNS ROUND ROBIN LOAD BALANCING.

> Headless service will Not always forward the request to first pod.

>curl <headless_service_name>:<container_port>  ---> this request is directaly forwaed to backend pod through
>    DNS ROUND ROBIN LOAD BALANCING mechanism and for each dns query/request it will result in new ip address
>    as headless service is load balancing the requests. 

>However, headless service , when used with StatefulSets provides a 
>unique identity to each pod managed by StatefulSet


>--------------------------------------------------------------------------------------------------------------


# Stateless Applications vs Stateful Application

>Stateless Application_

1> stateless applications do not depends on state, i.e. it do not saves the client data generated in one session
   for use in next session with that client. It also do not need permanant storage.
   eg_ nginx, apache, nodejs

2> we can simply scales a stateless application by deploying it on multiple servers, 
   it easily scales Horizontally.

3> this applications are much faster and needs no external storage or backup.

4> application are, web apps which serves the static web pages and need not to store any data. so all the request
   coming to the application will get the same response.

5> we use cluster ip service as an abstraction and to load balance the incoming requests    

> user --> LB --> FrontEnd/proxy/pod with service ---> cluster ip ---> stateless app


>Stateful Application_

1> stateful applications depends upon state of the application, i.e. it saves the client data 
   generated in one session for use in next session with that client. It also need permanant storage.
   eg_ Databases, kafka, elasticSearch

2> In mordern web application, the stateless application connects with steteful applications to serve the
   users requests.

3> A stateful application needs a persistant storage for it to store its state and read later.

4> needs to maintain users data in cases of n/w or storage failure.

> User---> LB ---> FrontEnd/Stateless Application --->Headless Service ---> Stateful Application.

>--------------------------------------------------------------------------------------------------------------

# Stateful Sets_

>A statefulSets is a k8s controller used to run the stateful application as containers/Pods in kubernetes cluster
>and manages the desired and current state.

>However, we do have other controller ReplicaSet, ReplicationController, Deployments, that 
>provide similar functinalities like StatefulSets. 
>However there are certain parameters that are unique to StatefulSets_

>Instead of generating random names of pods like Replication Controller or Replica Sets do, 
>Stateful sets generate stable name for each and every pod, so it becomes easier to identify the master pod
>by all other pods.

>In deployments , each pod gets a random identity with hash of RS and pod attached. pods gets a new identity 
>(hostname & ip) across restart and reschedule. the pod identity is generated in following syntax_
<name of deployment>-<replicaset hash>-<pod hash> , if pod get replaced, pod_hash will changed.

>in stateful sets , each pod will get stable name .
<statefulset_name>-ordinal


Naming of Pods with Replication Controller/Deployments :

> In case of deployments, each pod gets a random identity with hash of a ReplicaSet and Pod Attached.
> Pod gets a new identity i.e hostname and Ip , across restart and reschedule. 

> but in case of stateful application, we need a pod with stable IP , 
> so that the write/read request or in case of other pod replicate the data from pod 
> can be redirected to it in consistance manner even in case of pod recretaion.

> in case of deployments, the names generated for the pods is in following formate_
  <name of the deployment>-<hash value of the replica set>-<hash of the pod>
>  eg_ mysql-123467-abcdef

> in case of pod recreation, new pod gets a new name/identity, the first and second part of its name 
> i.e. <name of the deployment>-<hash value of the replica set> , remains same but the HASH od POD 
> will get changed, thus effective changing the name/identity.


1> Data Replication :

>kubernetes provide the replication algorithm for the purpose of replication of the data from 
>one pod to another pod. 

>this algorithm decides the order and way in which data is usually replicated from master pod to
>another slave pods.

>Stateful set follows the order creation and deletion, i.e if we creating several replicas of stateful pods
>then, pods will not get created simultaneously, instead it gets created in order.

>First pod created, ensure that it will replicate all data from the previous pod (i.e its ordinal - 1 pod)
>till then next pod will remains in pending state. once pod replicates the data, the next pod will get created
>this pod will replicates the data from its previous pod (in increasing order of Ordinal Number).

>Incase of DataBases the first pod i.e. pod with ordinal 0(zero), will always act as a primary instance, 
>and all other instances will replicates the data from this primary instance.

>this order is all possible becouse of the stable names , pods gets in stateful sets. without stable names
>pod will loose the connection with primary instance. 

>One thing to note that, Replication algorithm is not embedded with Stateful Sets, We have use different 
>replication algorithm as per need.
>One of most used method for databases, is to use Helm chart of Database, which have Replication algorithm
>embedded into it. This remove the overhead on devops team to use replication algorithm in stateful set manifest.

>Helms chart of databases  by default comes with algorithm for Ordered Replication of data from previous pod.



2> Sticky / Indentity Hostname (Naming of Pods with Stateful Sets):

> Each pod created by StatefulSet has a ordinal value (0 through # replicas -1 ) and a stable n/w id, 
> which is '<statefulsetname>-<ordinal>' assigned to it.
  eg_ mysql-0  / mysql-1 ...etc

>this makes it easier to make a perticular pod as master/primary and make other pods to replicate the data 
>from this master pod

>if the pod dies, a new pod is created with SAME NAME, so replication algorithm wont break.

>How to setup pod to pod communication, so that other pod can copy data from main pod ?
>again , pod created by replication set , upon recretion will retain the old name but ip address will change.
>and we can not set the communication between pod via name, bcuz, pod to pod dns resolution is not possible.
>we have dns resolution by fqdn will have a pod's ips address.


>can we use clusterip service ?
>NO, becouse, request will always be load balances among the replicas.

>can we use name of the pod ?
>NO, becouse, pod to pod communication via name is not possible.

>can we use Headless service name ?
>NO, becouse, the request may go to replicas as service always load balances the requests (dns round robin).

>Stateful sets when combined with headless service, gives a unique identity to each pod which is_
 <statefulset_name>-ordinal

>to target the pod, we can use the following syntax, so the all the desired request will go to only targeted pod
<statefulset_name>-<ordinal>.<headless_svc_name>
> eg_ http://mysql-0.db-headless  ----> a unique fqdn
>
    In stateful apps, the instance must have unique and persistance identity (stable hostname, IP's)
    that does not changes with restart or recreation or reschedule. 
    This makes it easier to elect a master instance.

    For stateful application with a stateful controller, it is possible to set the first pod as primary and other
    pods as replicas.

    The first pod will handle both read and write requests from user and other pod always sync with the first
    pod for data replication.
    if the pod dies a new pod will get created with same name.



3> Stable Persistant Storage:

>ref_ PV AND PVC yaml

> Every stateful set pod will have a persistance storage which is provisioned using PVC and PV 
> either statically or dynamically using storage classes. 

>every pod in a stateful set deployment will have its own PVC, as the slave/secondary pods replicates
>data from primary database instance they need a persistance storage to store the data.

>PV are not backed by locally attach storage on worker node but by networked storage system such as cloud providers
>The api object captures the details of the implemetation of the storage be that NFS, iSCSI, or cloud
>provider specific storage system.

>Stateful sets provides a key named as 'volumeClaimTemplates' to dynamically provision a PVC from storage class.
>Each pod inside theStatefulSet mounts these PVC's as volume to retain the data.

>The PVC is named as _ <volumeClaimTemplates_name>-<pod_name>-<cardinalNumber>
                  eg _ www-mysql-0


4> Ordered Creation, Deletion and Upgrades:

>Stateful sets assign a sticky identity- an ordinal number starting from zero.

>by default, statefulset pod are deployed in sequential order and are terminated in reverse ordinal.

>a new pod is created by cloning the previous pod's data unless the pod ordinal's zero.

>if the previous pod is in pending state, then the new pod will not be created. in case of database pods,
>second pod will get created and then it will replicate data from first pod, 
>only after that third pod will get created and then that pod will replicate data from second pod.

>if we delete the pod, it will delete the pod in reverse order, not in random order. By doing this, the replication
>algorithm is maintained.

>for example, if out of four replicas, if we scaled down to 3 , then only pod number 3 will be deleted. 
       

>                            **********************************************
>--------------------------------------------------------------------------------------------------------------

USING BOTH HEADLESS SERVICE AND CLUSTER IP IN AN APPLICATION :

>Lets suppose the scenario for a stateful application, where we have a multiple database instances deployed
>in our deployment. only one the database instance is primary database, which is capable storing the data and
>serving the read requests at the same time, while other replicas is for the purpose of only serving the read
>requests and they replicate the data from primary datbase instance.

>In this case, it is possible to use both HEADLESS AND CLUSTER IP SERVICE in our deployment of statful application

>We can serve the all Write requests via Headless Service to the Primary database instance and 
>all the Read request can be served by clusterip service from the replicated and primary datbase instances.

>  the format for write requests be like_ 
   http://<statefulsetname>-<ordinal>.<headless_service_name>
eg : https://mysql-0.db-headless

>  the format for read requests be like_ 
   http://<clusterip_service_name>:port
eg : http://db-clusteripservice:3306


>--------------------------------------------------------------------------------------------------------------

>Statefulset are valueable for application that requires one or  more of the following_

1> stable, unique network identifiers with help of headless service.
2> stable, persistant storage
3> ordered, graceful deployment and scalling
4> ordered, automated rolling updates

>--------------------------------------------------------------------------------------------------------------


>StatefulSet Headless Service_

apiVersion: v1
kind: Service
metadata:
  name: nginx  <--- headless service name
  labels:
    app: nginx
spec:
  ports:
  - port: 80
    name: web
  clusterIP: None                      # clusterIP: None , as it is headless service
  selector:
    app: nginx


>StatefulSet_

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: web

spec:                                   # Deployment specs
  selector:
    matchLabels:
      app: nginx                        # has to match .spec.template.metadata.labels
  serviceName: "nginx"  <--- must, headless service name
  replicas: 3                           # by default is 1
  minReadySeconds: 10                   # by default is 0
  template:
    metadata:
      labels:
        app: nginx                      # has to match .spec.selector.matchLabels
                                        
    spec:                               # Pod specs inside the deployement spec
      terminationGracePeriodSeconds: 10
      containers:
      - name: nginx
        image: registry.k8s.io/nginx-slim:0.8
        ports:
        - containerPort: 80
          name: web
        volumeMounts:
        - name: www
          mountPath: /usr/share/nginx/html

  volumeClaimTemplates:
  - metadata:
      name: www
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "my-storage-class"
      resources:
        requests:
          storage: 1Gi



>StatefulSet ClusterIP Service_

apiVersion: v1
kind: Service
metadata:
  name: nginx
  labels:
    app: nginx
spec:
  ports:
  - port: 80
    name: web
  type: clusterIP                     
  selector:
    app: nginx



>--------------------------------------------------------------------------------------------------------------


>kubectl get sts
>kubectl get pv
>kubectl get pvc    
         


