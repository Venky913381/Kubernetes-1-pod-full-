>

>Namespaces are like seperate virtual-spaces/workspaces within kubernetes cluster.
>kubernetes cluster may have multiple application deployed within same cluster. In this we can use seperate 
>namespaces for each application deployement, which introduce the layer of isolation between them.

>Using namespace we can enforce quota and limits on the pod for resource usage, which ensure that each application 
>have enough resources, and not all resources is consumed by one application only.

to get the k8s resourses which supports namespaces
>kubectl api-resources

to create different namespace
>kubectl create ns <ns-name>      ---> ns/namespace

to create a resource in a namespace other than default ns
>kubectl apply -f <k8s_res.yml> -n <name-space>

>kubectl <option> <resource> *<name>  -n <ns-name>    ---> -n / --namespace, options:- get, delete, apply, ...
eg> kubectl get rc <rc_name> -n testspace

to set custom Namespace as default
> kubectl config set-context --current --namespace=<ns-name>

To access service in another namespace 
> <servicename>.<namespacename>.svc.cluster.local  --> fqdn of service, curl it

To access pod without service in another namespace 
> <ip_of_pod>.<namespacename>.pod.cluster.local    --> fqdn of pod, curl it


>we can control resources in custom namespace in two different ways_(check limit-quota for more)

1> ResourceQuota
>this will reserve the hardware resource for the perticular object in the namespace. or we can put
>quota on the number of the objects that can be created within the namespace.

there are two types of quota/limits : 
1) OBJECT BASED QUOTA, where we limit the number of Object that can be created inside the namespace.
2) COMPUTE BASED QUOTA, where we limit the node resources to be used by k8s resource.

2> LimitRange
>This will set the combine limit on the quantity of the compute resource like RAM and CPU
>that can be used by the k8s objects in the given namespace.

#----------------------------------------------------------------------------------------------------------------

>to set namespace in yml_

apiVersion: v1
kind: Pod 

metadata: 
  name: pod1
  labels: 
     appname: app
  namespace: my-namespace     #setting namespace in pods manifest file.
spec: 
  containers:
    - name: firstcontainer
      image: coolgourav147/nginx-custom



>-----------------------------------------------------------------------------------------------------------------

>Namespace are the k8s obects that partitioned the single k8s cluster into multiple virtual cluster/workspaces.

>k8s can manage large number of workloads concurrently and organizations often
>choose to deploy projects created by seperate teams on shared clusters.

>k8s namespaces allow different teams , projects or customers share a same k8s cluster.

>namespace allows us to logically group objects together , so that we can control them as a unite/group.

>Namepsaces allows you to have similarly named k8s resources in different namepsaces.

>Using RBAC, we can implements the access control for different namespaces.

>k8s namespace provides the scope for k8s names it contains , which means using the 
>combination of an object name and namespace, each objects gets unique identity across the cluster.

>Not all k8s resources are namespaced, like k8s obects like Nodes, PV are not namespaced.
>they are cluster wide resources to be accessible by all objects in the cluster.

>resources in same namespace can communicate with each other by their names/ip's.
>But, across the cluster with multiple namespaces, they must use FQDN/fully qualified domain name for communication.

>fqdn, <service_name>.<namespace_name>.<subdomain/svc/pod>.cluster.local    ---> curl it from any pod/container.
.cluster.local , is the internal domain of k8s cluster
.svc/pod , is the subdomain 
.svc.cluster.local, is a Base domain name

>within namespace communication between pods happens through service.
>core-dns pod, in kube-system namespace, manages the dns services and resolve the ip addresses
>in k8s cluster and service.

>kube-proxy, is a core-dns service , which provide the service for the 
>pod-to-pod communication in default namespace.

>/etc/resolve.conf, will give the information that k8s added to the pod on its creation. 

>cat /etc/resolve.conf
nameserver 10.96.0.10
search default.svc.cluster.local svc.cluster.local cluster.local ap-south-1.compute.internal
options ndots:5


>-----------------------------------------------------------------------------------------------------------------

>Different existing namepsces in kubernetes.

>Default_
this is default namespace, by default all the resources get created in this namespace.

>Kube-system_
it is namespace for objects created by k8s system/control plane. any changes to objects in this ns
would couse irreperable damages to the cluster itself.

>kube-public_
created automatically and is readable by all users, including non authenticated users. this is mostaly
reserved for cluster usage, in case that some resources should be visible and readable publicly throughout 
the whole user

>kube-node-lease_
this namespace contains node lease objects associated with each node. node lease allows the kubelet to send 
heartbeats so that control plane can detect node failures.

>kubectl get namespace/ns
>kubectl get namespace/ns --show-labels
>kubectl create ns <ns-name>


apiVersion: v1
kind: Namespace

metadata:
  name: testnamespace
  labels: 
    target: test
    team: sedt-team 
    app: iot-app

>-----------------------------------------------------------------------------------------------------------------

*Types_Of_Namespaces_in_k8s_

1.PID Namespace (Process Namespace)
2.Network Namespace
3.Mount Namespace
         
>PID Namespace
each container gets its PID_1 process and it is isolated from other containers and processes of host machine.

>Network Namespace
each container gets its own network space , which makes it possible to have own IP , Route tables , ports etc..
all containers created will get attached to the virtual network interface for the communication.

>Mount Namespace
each container will have its own mount space, which makes it possible to have its own file system with hierarchy.



C-GROUPS :

>C-Groups Allocates and Limits the use of memory, cpu and other resources which are used by containers.

>They restrict containers from too much utilization of the host resources.

>So to put in simple words, Namespace decides WHAT TO USE, and C-Groups decides HOW MUCH TO USE.




>-----------------------------------------------------------------------------------------------------------------